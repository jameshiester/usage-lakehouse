name: "Deploy Dev"
run-name: ${{ github.actor}} is running a Terraform review and deploy to Dev ðŸš€
on:
  push:
    branches:
      - dev
permissions:
      # id-token write required for OIDC, contents read required for actions/checkout
      id-token: write
      contents: read
env:
   TF_LOG: INFO
   AWS_REGION: ${{ vars.TF_VAR_REGION }}
   AWS_BUCKET_NAME: ${{ secrets.TF_STATE_BUCKET_NAME }}
   AWS_BUCKET_KEY_NAME: ${{ secrets.TF_STATE_BUCKET_KEY }}

jobs:    
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/infrastructure
    environment: 
      name: dev
    env:
      LAMBDA_ARTIFACT_ID: ${{needs.build-lambda.outputs.artifact_id}}
      TF_VAR_Region: ${{ vars.TF_VAR_REGION }}
      TF_VAR_AZ01: ${{ vars.TF_VAR_AZ01 }}
      TF_VAR_AZ02: ${{ vars.TF_VAR_AZ02 }}
      TF_VAR_Prefix: ${{ vars.TF_VAR_PREFIX }}
      TF_VAR_SolTag: ${{ vars.TF_VAR_SOLTAG }}
      TF_VAR_GitHubRepo: ${{ vars.TF_VAR_GITHUBREPO }}
      TF_VAR_EnvCode: ${{ vars.TF_VAR_ENVCODE }}
      TF_VAR_EnvTag: ${{ vars.TF_VAR_ENVTAG }}
      TF_VAR_VPCCIDR: ${{ vars.TF_VAR_VPCCIDR }}
      TF_VAR_ECRRepo: ${{ vars.TF_VAR_ECRREPO }}
      TF_VAR_ImageTag: ${{ vars.TF_VAR_IMAGETAG }}
      TF_VAR_DBInstanceSize: ${{ vars.TF_VAR_DBINSTANCESIZE }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: '3.13'

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: '^1.24.4'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.TF_VAR_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHub-Actions-OIDC-TERRAFORM 

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -no-color
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_NAME }}" -backend-config="key=${{ secrets.TF_STATE_BUCKET_KEY }}" -backend-config="region=${{ vars.TF_VAR_REGION }}" -backend-config="encrypt=true" -backend-config="dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }}" -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Terraform Plan Status 
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: base
        run: terraform apply -auto-approve -input=false
  deploy-image:
    needs: terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    environment: 
      name: dev
    env:
      TF_VAR_Region: ${{ vars.TF_VAR_REGION }}
      TF_VAR_AZ01: ${{ vars.TF_VAR_AZ01 }}
      TF_VAR_AZ02: ${{ vars.TF_VAR_AZ02 }}
      TF_VAR_Prefix: ${{ vars.TF_VAR_PREFIX }}
      TF_VAR_SolTag: ${{ vars.TF_VAR_SOLTAG }}
      TF_VAR_GitHubRepo: ${{ vars.TF_VAR_GITHUBREPO }}
      TF_VAR_EnvCode: ${{ vars.TF_VAR_ENVCODE }}
      TF_VAR_EnvTag: ${{ vars.TF_VAR_ENVTAG }}
      TF_VAR_VPCCIDR: ${{ vars.TF_VAR_VPCCIDR }}
      TF_VAR_ECRRepo: ${{ vars.TF_VAR_ECRREPO }}
      TF_VAR_ImageTag: ${{ vars.TF_VAR_IMAGETAG }}
      TF_VAR_DBInstanceSize: ${{ vars.TF_VAR_DBINSTANCESIZE }}

    steps:
      - name: Check ECS image exists
        id: ecsimage
        run: |
          if aws ecr describe-images --repository-name ${{ vars.TF_VAR_ECRREPO }} --image-ids imageTag=${{ vars.TF_VAR_IMAGETAG }} >/dev/null 2>&1
          then
            echo "image_exists=true" >> "$GITHUB_ENV"
          else
            echo "image_exists=false" >> "$GITHUB_ENV"
          fi

      - name: Check for changes in go api
        uses: dorny/paths-filter@v3
        id: filter
        with:
          working-directory: ./
          base: ${{ github.ref }}
          filters: |
            go:
              - './go/**'

      - name: Login to Amazon ECR
        if: steps.filter.outputs.go == 'true' || env.image_exists == 'false'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        if: steps.filter.outputs.go == 'true' || env.image_exists == 'false'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.TF_VAR_ECRREPO }}
          IMAGE_TAG: ${{ vars.TF_VAR_IMAGETAG }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./go/API.Dockerfile .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Print Web App URL in Job Summary
        run: echo "${{ vars.TF_VAR_ENVTAG }}) :rocket:" >> $GITHUB_STEP_SUMMARY